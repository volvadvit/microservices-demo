version: "3.3"

#networks:
#  local_network:
#    driver: bridge

services:
  postgres:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_DB: spring_test
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    expose:
      - "5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zoo-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181


  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_JMX_PORT: '9091'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    ports:
      - 29092:29092
    links:
      - zookeeper

#  kafka2:
#    image: confluentinc/cp-kafka:7.5.0
#    container_name: kafka2
#    restart: unless-stopped
#    environment:
#      KAFKA_BROKER_ID: '0'
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_NUM_PARTITIONS: '12'
#      KAFKA_COMPRESSION_TYPE: 'gzip'
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
#      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
#      KAFKA_JMX_PORT: '9091'
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
#    ports:
#      - 29093:29093
#    links:
#      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092,kafka2:29093
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
#      - kafka2
      - zookeeper

#  eureka-server:
#    container_name: eureka-server
#    build:
#      context: eureka-server
#      dockerfile: Dockerfile
#    image: message-server:latest
#    ports:
#      - 8761:8761
#    networks:
#      - spring-cloud-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: nimda
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    volumes:
      - './config/keycloak/import:/opt/keycloak/data/import'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--import-realm", "--http-port", "7080", "--https-port", "7443" ]
    ports:
      - "7080:7080"
      - "7443:7443"